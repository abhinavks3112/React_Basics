{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","user","id","name","email","CardList","console","log","users","map","SearchBox","placeholder","handleChange","type","onChange","App","searchEventHandler","e","setState","searchField","target","value","state","fetch","then","response","json","this","filteredUsers","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BACnB,6BAAKL,EAAMI,KAAKE,OAChB,4BAAIN,EAAMI,KAAKG,YCJdC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAER,qBAAKC,UAAU,YAAf,SAEQD,EAAMW,MAAMC,KAAI,SAACR,GAAD,OAEZ,aADA,CACC,EAAD,CAAqBA,KAAMA,GAAhBA,EAAKC,UCJvBQ,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBAAOd,UAAU,YAAYe,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC8CxEG,G,wDA3CX,aAAe,IAAD,8BACZ,gBAmBFC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAnBtC,EAAKC,MAAQ,CACXd,MAAO,GACPW,YAAa,IAJH,E,qDASd,WAAoB,IAAD,OAEjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhB,GAAK,OAAI,EAAKU,SAAS,CAACV,e,oBAehC,WAEE,MAA+BmB,KAAKL,MAA5Bd,EAAR,EAAQA,MAAOW,EAAf,EAAeA,YACTS,EAAgBpB,EAAMqB,QAAO,SAAA5B,GAAI,OAAIA,EAAKE,KAAK2B,cAAcC,SAASZ,EAAYW,kBAExF,OACA,sBAAKhC,UAAU,MAAf,UACE,6CACA,cAAC,EAAD,CAAWa,YAAY,cAAcC,aAAce,KAAKX,qBACxD,cAAC,EAAD,CAAUR,MAASoB,W,GAvCPI,cCELC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d7f70fa7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => {\r\n    return(\r\n        <div className=\"card\">\r\n            <img alt=\"cats\" src={`https://robohash.org/${props.user.id}?set=set4&size=180x180`} />\r\n            <h2>{props.user.name}</h2>\r\n            <p>{props.user.email}</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './card-list.style.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n    console.log(props);\r\n    return(\r\n        <div className='card-list'>\r\n            {\r\n                props.users.map((user) => (\r\n                    // key attribute in map helps react to uniquely identify the particular instance that's changed and only re-render that and not others\r\n                    <Card key={user.id}  user={user} ></Card>\r\n                ))\r\n            }\r\n      </div>\r\n    );\r\n}","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\n/*\r\n Functional component received props and return some jsx\r\n Smaller, easier to test \r\n*/\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return(\r\n        <input className=\"searchBox\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n    );\r\n\r\n}","import { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n/*\nUsing class component in order to get access to:\n1. constructor and state (without use of hooks)\n2. lifecycle method (without use of hooks)\n */\n  class App extends Component\n  {\n    constructor() {\n      super();\n      this.state = {\n        users: [],\n        searchField: ''\n      }\n    }\n\n    // using lifecycle method to call api automatically and fetch data when virtual dom is getting mounted on html dom \n    componentDidMount(){\n      // api call to get data\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({users}));\n    }\n\n    /*\n    Arrow function automatically binds 'this' keyword to the place where the arrow function is located, so in our case\n    it binds 'this' keyword to refer to class App, even when we are using 'this' inside the arrow function\n     */\n    searchEventHandler = (e) => {\n      this.setState({ searchField: e.target.value })\n    }\n\n    /*\n     1. onChange is a synthetic event meaning real event happen in dom which is intercepted by react, in our case using onChange\n     2. setState is asynchronus so if we want to interact with the value inside it, we should do it by passing function as second parameter to setState\n    */\n    render() {\n\n      const { users, searchField } = this.state;\n      const filteredUsers = users.filter(user => user.name.toLowerCase().includes(searchField.toLowerCase()))\n\n      return (\n      <div className=\"App\">\n        <h1>CATS FAMILY</h1>\n        <SearchBox placeholder=\"Search Cats\" handleChange={this.searchEventHandler} />\n        <CardList users = {filteredUsers} />\n      </div>\n      );\n    }\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}